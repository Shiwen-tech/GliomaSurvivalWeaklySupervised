import os
import numpy as np
import nibabel as nib
import matplotlib.pyplot as plt



##Function that creates num_samples fake MRI volumes ( Each volume has size 64x64x64 (small cube))
def simulate_mri(volume_size=(64, 64, 64), num_samples=10):
    """Simulate small 3D MRI volumes with simple spherical tumors."""
    data = []
    for i in range(num_samples):##I Initialize a 3D volume with Gaussian noise (mean=0, std=0.1)

This acts like natural MRI background noise.
        volume = np.random.normal(0, 0.1, volume_size)
        ##Randomly pick a center and radius;Build a spherical region inside the volume; Inside the sphere, increase the intensity (add a bright spot) â†’ simulates a tumor.center = np.random.randint(20, 44, size=3)
        radius = np.random.randint(5, 10)
        X, Y, Z = np.meshgrid(
            np.arange(volume_size[0]),
            np.arange(volume_size[1]),
            np.arange(volume_size[2]),
            indexing="ij"
        )
        tumor = (X - center[0])**2 + (Y - center[1])**2 + (Z - center[2])**2 < radius**2
        volume[tumor] += np.random.uniform(0.5, 1.0)
        filename = os.path.join(DATA_DIR, f"simulated_mri_{i}.nii.gz")
        nib.save(nib.Nifti1Image(volume, affine=np.eye(4)), filename)
        data.append(filename)
    return data

def load_mri(file_path):
    """Load a 3D MRI volume."""
    img = nib.load(file_path)
    return img.get_fdata()

if __name__ == "__main__":
    generated_files = simulate_mri()
    print(f"Generated {len(generated_files)} MRI volumes.")
    sample = load_mri(generated_files[0])
    plt.imshow(sample[:, :, sample.shape[2]//2], cmap='gray')
    plt.title("Middle Slice of Simulated MRI")
    plt.axis('off')
    plt.show()
